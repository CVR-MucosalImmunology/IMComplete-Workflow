{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# **Part A: Preprocessing of imaging data**  \n",
    "<i>**Latest update</i> - Dec 2024**  \n",
    "\n",
    "#### **Authors:**  \n",
    "[Oscar Dong](https://github.com/Awesomenous) (oscardong4@gmail.com) | [Thomas O'Neil](https://github.com/DrThomasOneil) (thomas.oneil@sydney.edu.au) | [Heeva Baharlou](heeva.baharlou@sydney.edu.com)  \n",
    "\n",
    "##### The purpose of this notebook is to provide a consolidated approach to IMC analysis and forms the prerequisite steps to the IMComplete R package workflow. We focused \n",
    "\n",
    "Nature Method of the Year in 2024 was [**spatial proteomics**](https://www.nature.com/articles/s41592-024-02565-3). \n",
    "\n",
    "> Computational tools for spatial proteomics are the focus of the second Comment, from Yuval Bussi and Leeat Keren. These authors note that current image processing and analysis workflow are well defined but fragmented, with various steps happening back to back rather than in an integrated fashion. They envision a future for the field where image processing and analysis steps work in concert for improved biological discovery.\n",
    "\n",
    "In response to these comments, we have committed to provide a comprehensive, complete and dynamic workflow. In part, we aimed to achieve this by compiling as much as we could into this pre-processing workflow. \n",
    "\n",
    "Particularly, we hve\n",
    "\n",
    "<hr>\n",
    "\n",
    "Some scripts adapted from [BodenmillerGroup/ImcSegmentationPipeline](https://github.com/BodenmillerGroup/ImcSegmentationPipeline) & [PENGLU-WashU/IMC_Denoise](https://github.com/PENGLU-WashU/IMC_Denoise) \n",
    "\n",
    "<i>**Therefore, make sure to also reference these studies:**</i>  \n",
    "- Windhager, J., Zanotelli, V.R.T., Schulz, D. et al. An end-to-end workflow for multiplexed image processing and analysis. [Nat Protoc](https://doi.org/10.1038/s41596-023-00881-0) (2023).  \n",
    "- Lu P, Oetjen K, Bender D, et al. IMC-Denoise: a content aware pipeline to enhance Imaging Mass Cytometry. [Nature Communications](https://www.nature.com/articles/s41467-023-37123-6), 14(1), 1601, 2023.  \n",
    "\n",
    "<br>\n",
    "<hr>\n",
    "\n",
    "##### Planned future additions:  \n",
    "- Simple compartmentalisation in python widget\n",
    "- DAPI registration for improved cell segmentation\n",
    "- Integration with immunofluorescence\n",
    "- Integration with BIDCell - purpose to improve the initial segmentation mask prior to workflow.\n",
    "\n",
    "<br>\n",
    "<hr>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "# **What is in this workflow**\n",
    "\n",
    "This workflow aims to consolidate as many functions as possible in one python. The folder structure for this workflow is as follows:\n",
    "\n",
    "```text\n",
    "ImagingAnalysis/\n",
    "├── IMComplete-Workflow\n",
    "├── Experiment_name_1\n",
    "│     └── raw\n",
    "│            └── Sample1.zip\n",
    "│            └── Sample2.zip\n",
    "│            └── ...\n",
    "│     └── analysis\n",
    "│            └── 1_image_out\n",
    "│            └── 2_denoise\n",
    "│            └── 3_segmentation\n",
    "│                   └── 3a_fullstack\n",
    "│                   └── 3b_forSeg\n",
    "│                   └── 3c_cellpose_crop\n",
    "│                   └── 3d_cellpose_full\n",
    "│                   └── 3e_cellpose_mask\n",
    "│                   └── 3f_compartments\n",
    "│            └── 4_pyprofiler_output\n",
    "│     └── panel.csv\n",
    "├── ...\n",
    "├── Experiment_name_\n",
    "```\n",
    "<hr> \n",
    "\n",
    "##### Below is a summary of the individual components of the workflow. Each is accompanied by a how-to video.  \n",
    "### 1. Set up\n",
    "\n",
    "Start with a root folder for your image analysis (e.g. `ImagingAnalysis`). From here, the `set up` section of this script will inform you on how to clone the [IMComplete-Workflow](https://github.com/CVR-MucosalImmunology/IMComplete-Workflow) GitHub repository. You'll also download the necessary functions from these repositories:  \n",
    "- Functions from [BodenmillerGroup/ImcSegmentationPipeline](https://github.com/BodenmillerGroup/ImcSegmentationPipeline) which allow for the images to be extracted from the MCD file format.\n",
    "- Functions from [deMirandaLab/PENGUIN](https://github.com/deMirandaLab/PENGUIN) which can be used to denoise your IMC images.\n",
    "\n",
    "These contain files that will set up the conda environment to run the necessary functions. \n",
    "\n",
    "You'll also be prompted to set up your `raw` data files (as instructed in more detail [**here**](https://github.com/BodenmillerGroup/ImcSegmentationPipeline/blob/main/scripts/imc_preprocessing.ipynb)) and `panel.csv`. A template for the panel.csv can be found in the IMComplete-Workflow once the repository is downloaded. \n",
    "\n",
    "### 2. MCD extraction\n",
    "\n",
    "\n",
    "\n",
    "###\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "## Order of the analysis\n",
    "0. Set up\n",
    "1. MCD extraction\n",
    "2. Cellpose prep\n",
    "3. Cellpose model training\n",
    "4. Cellpose batch segmentation\n",
    "5. Feature Extraction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Set up\n",
    "\n",
    "Anaconda is a program used to install packages needed for many steps of the pipeline to run. Follow the steps below to set up Anaconda and a `conda` environment:\n",
    "\n",
    "**Step 1:** Install [**Anaconda** ](https://www.anaconda.com/download) <br>\n",
    "**Step 2:** Once Anaconda is installed, navigate to the relevant command line interface:\n",
    "<br>\n",
    "<div align=\"center\">\n",
    "\n",
    "| Windows                                                                                            | macOS                                                                                                      |\n",
    "|----------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------|\n",
    "| 1. Search for **'Anaconda Prompt'** in the taskbar search <br> 2. Select **Anaconda Prompt**  <br> | 1. Use `cmd + space` to open Spotlight Search  <br> 2. Type **'Terminal'** and press `return` to open <br> |\n",
    "\n",
    "</div>\n",
    "<br>\n",
    "\n",
    "**Step 3:** Set your directory to the analysis folder (and make folders)\n",
    "\n",
    "```bash\n",
    "cd /Desktop/ImageAnalysis\n",
    "```\n",
    "\n",
    "**Step 4:** Clone the IMComplete repository.\n",
    "\n",
    "*From Github*   \n",
    "\n",
    "Go to the [Github page](https://github.com/CVR-MucosalImmunology/IMComplete-Workflow) and near the top click the `code` button and download the zip. Unzip the folder into the root directory.\n",
    "\n",
    "*Using Git* in command line\n",
    "\n",
    "<details><summary>Install Git</summary>\n",
    "\n",
    "Git needs to be installed on your system. Find the instructions [here](https://git-scm.com/downloads)\n",
    "\n",
    "<hr></details>\n",
    "\n",
    "```bash\n",
    "git clone --recursive https://github.com/CVR-MucosalImmunology/IMComplete-Workflow.git\n",
    "```\n",
    "\n",
    "**Step 5:** Clone the extra repositories:    \n",
    "- [BodenmillerGroup/ImcSegmentationPipeline](https://github.com/BodenmillerGroup/ImcSegmentationPipeline): Windhager, J., Zanotelli, V.R.T., Schulz, D. et al. An end-to-end workflow for multiplexed image processing and analysis. [Nat Protoc](https://doi.org/10.1038/s41596-023-00881-0) (2023).  \n",
    "```bash\n",
    "git clone --recursive https://github.com/BodenmillerGroup/ImcSegmentationPipeline.git\n",
    "```  \n",
    "- [deMirandaLab/PENGUIN](https://github.com/deMirandaLab/PENGUIN): Sequeira, A. M., Ijsselsteijn, M. E., Rocha, M., & de Miranda, N. F. (2024). PENGUIN: A rapid and efficient image preprocessing tool for multiplexed spatial proteomics. [Computational and Structural Biotechnology Journal](https://doi.org/10.1101/2024.07.01.601513)\n",
    "```bash\n",
    "git clone --recursive https://github.com/deMirandaLab/PENGUIN.git\n",
    "```\n",
    "\n",
    "**Step 6:** Create a conda environment and install some  packages (in one line)\n",
    "\n",
    "```bash\n",
    "conda env create -f IMComplete-Workflow/environment.yml\n",
    "```\n",
    "**Step 7:** Activate the conda environment\n",
    "\n",
    "```bash\n",
    "conda activate IMComplete\n",
    "```\n",
    "\n",
    "**Step 8:** GPU-acceleration\n",
    "\n",
    "Unfortunately, parts of this workflow will require GPU-acceleration: Cell segmentation, Denoise, PyProfiler (will run quicker, but not necessary).\n",
    "\n",
    "You will need to install Pytorch and pytorch-cuda versions that are suitable for your PC. Instructions are found [here](https://pytorch.org/get-started/previous-versions/).\n",
    "\n",
    "```bash\n",
    "conda install pytorch==2.4.1 torchvision==0.19.1 torchaudio==2.4.1 pytorch-cuda=12.4 -c pytorch -c nvidia\n",
    "```\n",
    "**Step 10:** Lastly, install Cellpose\n",
    "\n",
    "```bash\n",
    "python -m pip install PyQt5 cellpose[gui] tensorflow keras\n",
    "```\n",
    "\n",
    "<hr>\n",
    "\n",
    "You can check the installation requirements with the following function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Checking required packages in the current Conda environment...\n",
      "\n",
      "  All required packages are installed and meet the required versions.\n",
      "\n",
      "-----------------\n",
      "\n",
      "Checking that CUDA has been installed properly...\n",
      "\n",
      "  GPU acceleration has not been prepared. Consult https://pytorch.org/get-started/previous-versions/\n",
      "and try again\n"
     ]
    }
   ],
   "source": [
    "from PyMComplete import check_setup\n",
    "\n",
    "check_setup()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr>\n",
    "\n",
    "## Create a Project folder for your analysis\n",
    "\n",
    "The following function will create the folder structure for this workflow and generate a template `panel.csv`.\n",
    "\n",
    "Set `rootdir` as your `ImageAnalysis` folder directory and `projdir` as your project folder name."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "rootdir = \"/Users/thomasoneil/Desktop/test_IF\"\n",
    "projdir = \"Jan17_IFtest\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Project 'project' created successfully.\n"
     ]
    }
   ],
   "source": [
    "from PyMComplete import newProj\n",
    "\n",
    "newProj(rootdir, projdir)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr>\n",
    "\n",
    "## Set up your raw folder\n",
    "\n",
    "Your MCD files should be zipped \n",
    "\n",
    "The [**BodenmillerGroup**](https://github.com/BodenmillerGroup/ImcSegmentationPipeline/blob/main/scripts/imc_preprocessing.ipynb) ImcSegmentationPipeline Notebook covers this more detail. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# MCD extraction\n",
    "\n",
    "**MCD extraction**  \n",
    "<span style=\"color:grey; opacity: 0.5\">Cellpose prep</span>  \n",
    "<span style=\"color:grey; opacity: 0.5\">Cellpose model training</span>  \n",
    "<span style=\"color:grey; opacity: 0.5\">Cellpose batch segmentation</span>    \n",
    "<span style=\"color:grey; opacity: 0.5\">Feature Extraction</span>    \n",
    "\n",
    "We have wrapped the Bodenmiller MCD extraction function. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gathering Directories...\n",
      "Extracting MCD...\n",
      "Generating Fullstacks...\n",
      "Generating Denoise output...\n",
      "Done!\n"
     ]
    }
   ],
   "source": [
    "from PyMComplete import bodenmiller_mcd_extract\n",
    "\n",
    "bodenmiller_mcd_extract(rootdir=rootdir,\n",
    "                                    projdir=projdir, \n",
    "                                    denoise=1, \n",
    "                                    panel=\"panel.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Alternative: Immunofluorescent Images\n",
    "<details><summary>Expand:</summary>\n",
    "Set up panel in the same way.\n",
    "\n",
    "|Conjugates|Target|Full|Segment|\n",
    "|:----:|:----:|:----:|:----:|\n",
    "| |dapi|1|1|\n",
    "|...|...|...|...|\n",
    "\n",
    "Instead of MCD extract and cellpose-prep, we'll use a variation of the two.\n",
    "\n",
    "**IF_extract** requires that images are placed in the raw/ folders in one of three formats:\n",
    "\n",
    "The first is that images are organised into a stack, with the image index aligning with the order in `panel.csv`\n",
    "```text\n",
    "raw/\n",
    "├── imagename\n",
    "│     └── stack.tif\n",
    "```\n",
    "\n",
    "The second is that images are ordered alphanumerically aligned to the order in panel.csv\n",
    "```text\n",
    "raw/\n",
    "├── imagename\n",
    "│     └── image_01.tif\n",
    "|       or\n",
    "│     └── CH01.tif\n",
    "```\n",
    "\n",
    "The third is that images are labelled identically to either the Conjugate or Target column\n",
    "```text\n",
    "raw/\n",
    "├── imagename\n",
    "│     └── Cy3.tif\n",
    "|       or\n",
    "│     └── CD3.tif\n",
    "```\n",
    "\n",
    "Respectively, the function looks like this:\n",
    "\n",
    "```python\n",
    "exract_IF(rootdir=rootdir, \n",
    "          projdir=projdir,\n",
    "          extract_by = \"stack\"  \n",
    "          ...\n",
    "          extract_by = \"order\"  \n",
    "          ...\n",
    "          extract_by = \"Conjugate\" or \"Target\"  \n",
    "            )\n",
    "```\n",
    "</details>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "18b033dc57314054bcf59f43b985964b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "VBox(children=(HBox(children=(Dropdown(description='Image:', layout=Layout(width='200px'), options=('COL_ARTPo…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from PyMComplete import check_extract\n",
    "\n",
    "check_extract(\n",
    "    rootdir=rootdir,\n",
    "    projdir=projdir,\n",
    "    crop=200\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gathering Directories...\n",
      "Done!\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from PyMComplete import extract_images\n",
    "\n",
    "extract_images(rootdir=rootdir, \n",
    "               projdir=projdir, \n",
    "               panel_filename=\"panel.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Crop Selector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2a6ad4cacfe74aa1bc2aa14695a09b90",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "VBox(children=(HBox(children=(Dropdown(description='Image:', layout=Layout(width='200px'), options=('COL_ARTPo…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saved coords '924_406_206_300' for image 'COL_ARTPos_253471_s10_control_r1s1_channels' into image.csv.\n",
      "Saved coords '924_406_206_300' for image 'COL_ARTPos_253471_s10_control_r1s1_channels' into image.csv.\n"
     ]
    }
   ],
   "source": [
    "from PyMComplete import CropSelector\n",
    "\n",
    "CropSelector(rootdir, projdir)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Cellpose preparation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from PyMComplete import prep_cellpose\n",
    "\n",
    "prep_cellpose(rootdir=rootdir, \n",
    "                  projdir=projdir, \n",
    "                  nucleus = \"dapi\", \n",
    "                  resolution =1, \n",
    "                  crop_size=200)\n",
    "\n",
    "#* to do:\n",
    "# - check that the folder exists, and then that the images inside are tiff and/or only read the tiffs.\n",
    "# - output messages along the way such as \"number of images\", list images, "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Cell pose "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (2939267591.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[10], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    python -m cellpose\u001b[0m\n\u001b[0m              ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "python -m cellpose"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "See https://cellpose.readthedocs.io/en/latest/models.html for information on models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from PyMComplete import batch_segment\n",
    "\n",
    "batch_segment(rootdir=rootdir,\n",
    "              projdir=projdir,\n",
    "              model =\"CP_20250110_151059\", \n",
    "              builtin_model = None, \n",
    "              channels = [2, 3],\n",
    "              cell_diameter = ,\n",
    "              flow_threshold = 1,\n",
    "              cellprob_threshold = -3\n",
    "              )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import libraries\n",
    "import os\n",
    "import skimage.io\n",
    "from cellpose import models, core\n",
    "from cellpose.io import logger_setup\n",
    "import shutil\n",
    "from pathlib import Path\n",
    "import tifffile\n",
    "\n",
    "def batch_segment(rootdir=\"\",\n",
    "              projdir=\"\",\n",
    "              model = None, \n",
    "              builtin_model = None, \n",
    "              channels = [2, 3],\n",
    "              cell_diameter = 14.7,\n",
    "              flow_threshold = 1,\n",
    "              cellprob_threshold = -3\n",
    "              ):\n",
    "    # Define Cellpose model\n",
    "    if model is not None: \n",
    "        model_path = os.path.join(rootdir, projdir, \"analysis/3_segmentation/3c_cellpose_crop/models\", model)\n",
    "        if os.path.exists(model_path):\n",
    "            print(\"Choosing\", model_path)\n",
    "            model = models.CellposeModel(pretrained_model=model_path)\n",
    "\n",
    "        else:\n",
    "            print(\"Model path does not exist. Exiting...\")\n",
    "            print(model_path)\n",
    "            return\n",
    "        \n",
    "    elif model is None and builtin_model is not None: \n",
    "        if builtin_model in ['cyto3', 'cyto2', 'cyto', 'nuclei']:\n",
    "            print(\"Choosing\", builtin_model)\n",
    "            model = models.Cellpose(model_type='cyto3')\n",
    "        else: \n",
    "            print(\"'\",builtin_model, \"' not available as a built in model.\")\n",
    "            print(\"Choose: cyto, cyto2, cyto3 or nuclei.\")\n",
    "            return\n",
    "\n",
    "    # Set and create directories\n",
    "    analysis = Path(os.path.join(rootdir, projdir))\n",
    "    image_dir = analysis / \"analysis/3_segmentation/3d_cellpose_full\"\n",
    "    mask_dir = analysis / \"analysis/3_segmentation/3e_cellpose_mask\"\n",
    "    mask_dir.mkdir(parents=True, exist_ok=True)  # ensure mask directory exists\n",
    "\n",
    "    # Call logger_setup to have output of cellpose written\n",
    "    logger_setup()\n",
    "\n",
    "    # Get list of image files\n",
    "    files = [os.path.join(image_dir, f) for f in os.listdir(image_dir) if f.endswith(\".tiff\")]  # Adjust the file extension if necessary\n",
    "    imgs = [tifffile.imread(f) for f in files]\n",
    "\n",
    "    # Run segmentation\n",
    "    masks, flows, styles = model.eval(imgs, diameter=cell_diameter, flow_threshold=flow_threshold, cellprob_threshold=cellprob_threshold, channels=channels)\n",
    "\n",
    "    # Save mask images\n",
    "    for idx, mask in enumerate(masks):\n",
    "        original_path = Path(files[idx])\n",
    "        new_path = mask_dir / (original_path.stem + \"_mask.tif\")\n",
    "        tifffile.imwrite(new_path, mask.astype(\"uint16\"))\n",
    "\n",
    "    print(\"Done!\")\n",
    "\n",
    "batch_segment(rootdir=rootdir,\n",
    "              projdir=projdir,\n",
    "              model =\"CP_20250110_151059\", \n",
    "              builtin_model = None, \n",
    "              channels = [2, 3],\n",
    "              cell_diameter = 14.7,\n",
    "              flow_threshold = 1,\n",
    "              cellprob_threshold = -3\n",
    "              )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PyProfiler\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using device: cpu\n",
      "No folders found in the compartments directory. Disabling compartment processing.\n",
      "Processing COL_HIVneg_729593_s1_test_r1s1_channels...\n",
      "Processing COL_ARTPos_253471_s10_test_r1s1_channels...\n",
      "Processing COL_HIVneg_958700_s13_control_r1s1_channels...\n",
      "Processing COL_ARTPos_608647_s14_control_r1s1_channels...\n",
      "Processing COL_ARTPos_916034_s19_test_r1s2_channels...\n",
      "Processing COL_HIVneg_958700_s13_test_r1s1_channels...\n",
      "Processing COL_HIVneg_236532_s5_test_r1s1_channels...\n",
      "Processing COL_ARTPos_916034_s19_control_r1s1_channels...\n",
      "Processing COL_HIVneg_453548_s8_test_r1s1_channels...\n",
      "Processing COL_ARTPos_564855_s12_test_r1s1_channels...\n",
      "Processing COL_ARTPos_608647_s14_test_r1s1_channels...\n",
      "Processing COL_ARTPos_253471_s10_control_r1s1_channels...\n",
      "Processing COL_HIVneg_453548_s8_control_r1s1_channels...\n",
      "Processing COL_ARTPos_564855_s12_control_r1s1_channels...\n",
      "Processing COL_HIVneg_729593_s1_control_r1s1_channels...\n",
      "Processing COL_HIVneg_236532_s5_control_r1s1_channels...\n",
      "Processing complete.\n",
      "Total time taken: 72.27561712265015\n",
      "Results saved to /Users/thomasoneil/Desktop/test_IF/project/analysis/4_pyprofiler_output/cell_data_combined.csv\n"
     ]
    }
   ],
   "source": [
    "from PyMComplete import pyprofiler\n",
    "\n",
    "pyprofiler(rootdir = rootdir, \n",
    "               projdir = projdir, \n",
    "               mean = 1, \n",
    "               shape = 1, \n",
    "               geometry = 0, \n",
    "               compartment = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "import csv\n",
    "\n",
    "# Data to be written to the CSV file\n",
    "panel = [\n",
    "    [\"Conjugate\", \"Target\", \"Full\", \"Segment\"]\n",
    "]\n",
    "\n",
    "# Specify the file name\n",
    "filename = \"/Users/thomasoneil/Desktop/panel.csv\"\n",
    "\n",
    "# Writing to the CSV file\n",
    "with open(filename, mode='w', newline='') as file:\n",
    "    writer = csv.writer(file)\n",
    "    writer.writerows(panel)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "IMComplete",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.21"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
